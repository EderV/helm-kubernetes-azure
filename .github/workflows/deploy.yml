name: Build and Deploy to AKS

# Trigger the workflow when there is a push to the main branch
on:
  push:
    branches:
      - main

# Define reusable environment variables
env:
  DOCKER_IMAGE: ederv/learning-azure               # Change this to your Docker Hub repo/image
  AKS_CLUSTER: AKS-LearningAzure                   # Name of your AKS cluster
  AKS_RESOURCE_GROUP: Learning-Azure-RG            # Azure Resource Group containing your AKS
  KUBECONFIG: /tmp/kubeconfig                      # Temporary location to save kubeconfig

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu runner

    steps:
      # Step 1: Checkout the code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (advanced Docker builder)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Login to DockerHub using secrets
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use a Docker Hub Access Token, not password

      # Step 4: Build the Docker image and push to DockerHub
      - name: Build and push
        run: |
          TAG=${GITHUB_SHA::7}  
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $DOCKER_IMAGE:$TAG \
            -f cicd/Dockerfile . \
            --push

      # Step 5: Login to Azure using GitHub secret containing the Service Principal credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 6: Set up Azure CLI on the GitHub runner
      - name: Set up Azure CLI
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            az storage -h

      # Step 7: Get kubeconfig from AKS and save it temporarily
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group $AKS_RESOURCE_GROUP \
            --name $AKS_CLUSTER \
            --overwrite-existing \
            --file $KUBECONFIG

      # Step 8: Install Helm CLI
      - name: Install Helm
        uses: azure/setup-helm@v3

      # Step 9: Deploy (or upgrade) the app into AKS using Helm
      - name: Deploy to AKS with Helm
        run: |
          helm upgrade --install first-release ./cicd/helm \
            --kubeconfig $KUBECONFIG \
            --set image.repository=$DOCKER_IMAGE,image.tag=$TAG

      # Optional Step 10: Clean up sensitive files after deployment
      - name: Cleanup kubeconfig
        if: always()
        run: |
          rm -f $KUBECONFIG